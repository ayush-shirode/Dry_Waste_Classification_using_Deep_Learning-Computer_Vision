<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sortify - Product</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="update.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
    <style>
        :root {
            --theme-color: #63FFB6;
        }

        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            padding-top: 90px;
            background-color: #ffffff;
            text-align: center;
        }

        .navbar {
            display: flex;
            width: 782px;
            height: 62px;
            background-color: rgb(250, 250, 250);
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            border-radius: 52.53px;
            align-items: center;
            padding: 0 9px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            justify-content: space-between;
            z-index: 1000;
        }

        .navbar-left {
            display: flex;
            align-items: center;
        }

        .navbar-logo {
            height: 50px;
            width: 50px;
        }

        .navbar-title {
            font-size: 20px;
            font-weight: 600;
            margin-left: 10px;
        }

        .navbar-menu {
            display: flex;
            justify-content: center;
            flex-grow: 1;
            gap: 25px;
        }

        .navbar-menu a {
            text-decoration: none;
            color: black;
            padding: 5px 10px;
            transition: background 0.3s ease;
            border-radius: 52.53px;
        }

        .navbar-menu a:hover,
        .navbar-menu a.active {
            background: var(--theme-color);
        }

        .navbar-right {
            display: flex;
            gap: 10px;
            margin-left: auto;
        }

        .navbar-right a {
            text-decoration: none;
            color: black;
            padding: 5px 15px;
            border-radius: 15px;
            transition: background 0.3s ease;
        }

        .navbar-right a:hover {
            background: var(--theme-color);
        }

        .product-btn {
            background: var(--theme-color);
            padding: 5px 15px;
            border-radius: 15px;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 100px;
            flex-direction: column;
            transform: translateZ(-70px);
            margin-top: 20px;
        }

        .section {
            display: flex;
            justify-content: space-around;
            width: 80%;
            background: white;
            padding: 20px;
            border-radius: 52.53px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }

        .box {
            width: 40%;
            padding: 20px;
            background: #eee;
            border-radius: 52.53px;
            transition: background 0.3s ease, transform 0.2s ease;
            position: relative;
            overflow: hidden;
        }

        .box:hover {
            background: var(--theme-color);
            transform: scale(1.05);
        }

        .logout:hover {
            background: rgb(255, 175, 175) !important;
            transform: scale(1.05);
        }

        .waste-bins img {
            width: 80px;
            position: absolute;
            {{!-- bottom: -40px; --}}
            left: 50%;
            {{!-- transform: translateX(-50%); --}}
            transition: transform 0.5s ease-in-out, bottom 0.5s ease-in-out;
        }
        #red-bin{
            transform: translate(-140px, 100px) scale(1.75);
        }
        #green-bin{
            transform: translate(80px, 84px) scale(1.75);
        }

        #object-identifier:hover~.waste-bins img {
            bottom: 50%;
            transform: translate(-50%, 50%);
        }

        #imageTaken {
            transform: translate(10px, 0px);
        }
    </style>
</head>

<body>
    <div class="navbar" id="navbar">
        <div class="navbar-left" id="navbar-left">
            <img src="images/logo_sortify.jpg" alt="Sortify Logo" class="navbar-logo" id="navbar-logo">
            <span class="navbar-title" id="navbar-title">Sortify</span>
        </div>
        <div class="navbar-menu">
            <a href="home_page">Home</a>
            <a href="why_page">Why ?</a>
            <a href="join_page">Join Us</a>
            <a href="contact_page">Contact Us</a>
        </div>
        <div class="navbar-right" id="navbar-right">
            <a href="#" class="product-btn" id="product-btn">Product</a>
            <a href="/logout" class="logout">Logout</a>
        </div>
    </div>

    <div class="container" id="main-container">
        <div class="section" id="product-section">
            <div id="startCam" class="box" id="object-identifier">
                <h3>Object-Identifier</h3>
                <img id="nah" src="images/waste.png" alt="Object" width="100%" id="object-image">
            </div>

            <div id="stopCam" class="box waste-bins" id="waste-classifier">
                <h3>Waste-Classifier</h3>
                <div id="imageTaken" style="display: flex; flex-wrap: wrap; gap: 4px; text-align: center;">
                    <!-- Captured images will be displayed here -->
                </div>
                <img src="images/red_dustbin.png" alt="Non-recyclable" id="red-bin">
                <img src="images/green_dustbin.png" alt="Recyclable" id="green-bin">

            </div>

        </div>
    </div>
    <script>
        const URL = "./tfjs_model/";
        let i = 1;
        let model, webcam, labelContainer, maxPredictions;
        $("#startCam").click(async function init() {
            if (i == 1) {
                $("#nah").hide();
                console.log("bye")

                const modelURL = URL + "model.json";

                // Load the model
                console.log("Loading model...");
                model = await tf.loadGraphModel(modelURL);
                console.log("Model loaded");

                // Setup webcam
                async function setupWebcam() {
                    const webcamElement = document.createElement("video");
                    webcamElement.width = 200;
                    webcamElement.height = 200;
                    console.log("yo")
                    webcamElement.setAttribute("autoplay", "");
                    webcamElement.setAttribute("playsinline", "");
                    console.log("yo1")
                    document.getElementById("startCam").appendChild(webcamElement);
                    console.log("yo2")
                    webcam = await tf.data.webcam(webcamElement);
                    console.log("Webcam setup complete");
                }

                await setupWebcam();

                labelContainer = document.getElementById("percentage");

                console.log("Setup complete!");
                i = 0;
            } else {

            }
        }); $("#stopCam").click(async function loop() {
            $("#green-bin").hide();
            $("#red-bin").hide();

            try {
                console.log("Capturing image...");

                let capturedImageTensor = await webcam.capture();
                console.log("Captured Image Shape: ", capturedImageTensor.shape); // Debug

                let floatImage = capturedImageTensor.toFloat().div(tf.scalar(255.0));

                let resizedImage = tf.image.resizeBilinear(floatImage, [224, 224]);

                let preprocessedImage = resizedImage.expandDims(0);
                console.log("Preprocessed Image Shape: ", preprocessedImage.shape); // Debug

                const container = document.getElementById("imageTaken");
                container.innerHTML = "";

                const capturedImageCanvas = document.createElement("canvas");
                capturedImageCanvas.width = 224;
                capturedImageCanvas.height = 224;
                const ctx = capturedImageCanvas.getContext("2d");

                await tf.browser.toPixels(resizedImage, capturedImageCanvas);

                const capturedImage = capturedImageCanvas.toDataURL();

                const imgContainer = document.createElement("div");
                imgContainer.style.padding = "5px";
                imgContainer.style.textAlign = "center";

                const imgElement = document.createElement("img");
                imgElement.src = capturedImage;
                imgElement.style.width = "200px";
                imgElement.style.height = "200px";
                imgContainer.appendChild(imgElement);
                container.appendChild(imgContainer);

                console.log("Final Tensor before Prediction: ", preprocessedImage.dataSync());

                const prediction = await model.predict(preprocessedImage);
                const predictionArray = prediction.dataSync();

                console.log("Raw Model Predictions:", predictionArray);

                let highestIndex = 0;
                let highestProbability = 0;

                for (let i = 0; i < predictionArray.length; i++) {
                    if (predictionArray[i] > highestProbability) {
                        highestProbability = predictionArray[i];
                        highestIndex = i;
                    }
                }

                const threshold = 0.5;  // You can adjust this if needed
                const predictedLabel = predictionArray[0] > threshold ? "Recyclable" : "Non-Recyclable";
                console.log(`Raw Prediction Score: ${predictionArray[0]}`);
                console.log(`Predicted Class: ${predictedLabel}`);


                console.log(`Predicted Class: ${predictedLabel}, Probability: ${highestProbability.toFixed(2)}`);

                const label = document.createElement("p");
                label.innerHTML = `${predictedLabel} (${(highestProbability * 100).toFixed(2)}%)`;

                label.style.transform = "translate(0px,40px)";

                imgContainer.appendChild(label);


                for (let i = 0; i < predictionArray.length; i++) {
                    {{!-- const classPrediction = `Class ${i}: ${predictionArray[i].toFixed(2)}`; --}}
                    const label = document.createElement("p");
                    {{!-- label.innerHTML = classPrediction; --}}
                    imgContainer.appendChild(label);
                }

                capturedImageTensor.dispose();
                floatImage.dispose();
                resizedImage.dispose();
                preprocessedImage.dispose();

                document.getElementById("StartCam").style.visibility = "hidden";
            } catch (error) {
                console.error("Error during image capture and prediction:", error);
            }

        });
    </script>
</body>

</html>